/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { Skeleton } from 'three'

function getAllBonesFromTree(bone) {
  const bonesList = []
  let mappedList = {}

  if (bone.type === 'Bone') {
    bonesList.push(bone)
    mappedList[bone.name] = bone
  }

  if (bone.children.length > 0) {
    for (const boneIn of bone.children) {
      const { list, map } = getAllBonesFromTree(boneIn)

      bonesList.push(...list)
      mappedList = { ...mappedList, ...map }
    }
  }

  return { list: bonesList, map: mappedList }
}

export default function Model(props) {
  const group = useRef()
  const { nodes } = useGLTF(`/models/Main.glb`, '/draco-gltf/')

  const [skeleton, setSkeleton] = useState()
  const [boneTree, setBoneTree] = useState()
  const [bonesMap, setBonesMap] = useState()

  useEffect(() => {
    setBoneTree(nodes.Pelvis.clone())
  }, [nodes.Pelvis])

  useEffect(() => {
    if (!skeleton && boneTree) {
      const { boneInverses } = nodes.Body.skeleton
      const { list, map } = getAllBonesFromTree(boneTree)

      setBonesMap(map)
      setSkeleton(new Skeleton(list, boneInverses))
    }
  }, [boneTree, nodes.Body.skeleton, skeleton])

  useEffect(() => {
    if (bonesMap) bonesMap.Chest.lookAt(0, 2, 2)
  }, [bonesMap])

  return boneTree ? (
    <group ref={group} {...props} dispose={null}>
      <primitive object={boneTree} />
      <mesh geometry={nodes.Chest_fluff.geometry} />
      <skinnedMesh
        geometry={nodes.Basic_folded_wings.geometry}
        skeleton={skeleton}
      >
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Basic_wings.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh
        geometry={nodes.Bat_folded_wings.geometry}
        skeleton={skeleton}
      >
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Bat_wings.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Body.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Bowtie.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Canine.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Canine_male.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Cheeks_fluff.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Collar.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Eyelashes.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Eyes.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Hooves.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Hooves_fluff.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Neck_fluff.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh geometry={nodes.Scarf.geometry} skeleton={skeleton}>
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh
        name='Head'
        geometry={nodes.Head.geometry}
        skeleton={skeleton}
        morphTargetDictionary={nodes.Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Head.morphTargetInfluences}
      >
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh
        name='Head_male'
        geometry={nodes.Head_male.geometry}
        skeleton={skeleton}
        morphTargetDictionary={nodes.Head_male.morphTargetDictionary}
        morphTargetInfluences={nodes.Head_male.morphTargetInfluences}
      >
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh
        name='Teeth'
        geometry={nodes.Teeth.geometry}
        skeleton={skeleton}
        morphTargetDictionary={nodes.Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Teeth.morphTargetInfluences}
      >
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
      <skinnedMesh
        name='Tongue'
        geometry={nodes.Tongue.geometry}
        skeleton={skeleton}
        morphTargetDictionary={nodes.Tongue.morphTargetDictionary}
        morphTargetInfluences={nodes.Tongue.morphTargetInfluences}
      >
        <meshLambertMaterial color={'hotpink'} skinning />
      </skinnedMesh>
    </group>
  ) : null
}
